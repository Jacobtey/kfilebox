#include "DaemonConnection.h"

namespace core {




DaemonConnection::DaemonConnection()
// don't delete the following line as it's needed to preserve source code of this autogenerated element
// section 127-0-0-2-7211d300:128840390db:-8000:0000000000001292 begin
{

    QString path(QDir::home().path());
    path.append(QDir::separator()).append(".dropbox/command_socket");
    path = QDir::toNativeSeparators(path);

    s = new QLocalSocket(this);
    connect(s, SIGNAL(error(QLocalSocket::LocalSocketError)),this, SLOT(displayError(QLocalSocket::LocalSocketError)));

    s->connectToServer(path);
    s->waitForConnected(5000);
    connect(s, SIGNAL(readyRead()), this, SLOT(readMsg()));

}
// section 127-0-0-2-7211d300:128840390db:-8000:0000000000001292 end
// don't delete the previous line as it's needed to preserve source code of this autogenerated element

DaemonConnection::~DaemonConnection()
// don't delete the following line as it's needed to preserve source code of this autogenerated element
// section 127-0-0-2-7211d300:128840390db:-8000:0000000000001295 begin
{
    s->close();
    f->close();
}
// section 127-0-0-2-7211d300:128840390db:-8000:0000000000001295 end
// don't delete the previous line as it's needed to preserve source code of this autogenerated element

QString DaemonConnection::send_command(QString command, QString args)
// don't delete the following line as it's needed to preserve source code of this autogenerated element
// section 127-0-0-2-7211d300:128840390db:-8000:0000000000001297 begin
{
    QString returnValue="";
    s->write(command.toUtf8());
    s->write(QString("\n").toUtf8());
    s->write(QString("done\n").toUtf8());
    s->flush();
    s->waitForReadyRead(3000);

    return returnValue;
}
// section 127-0-0-2-7211d300:128840390db:-8000:0000000000001297 end
// don't delete the previous line as it's needed to preserve source code of this autogenerated element

void DaemonConnection::readMsg()
 {
   QString msg=s->readAll();
   emit dataReceived(msg);
   //qt_message_output(QtWarningMsg,"++"+msg.toLatin1()+"++");

 }

 void DaemonConnection::displayError(QLocalSocket::LocalSocketError socketError)
 {
     switch (socketError) {
     case QLocalSocket::ServerNotFoundError:
         qt_message_output(QtWarningMsg, tr("The host was not found. Please check Dropbox daemon installation.").toLatin1());
         break;
     case QLocalSocket::ConnectionRefusedError:
         qt_message_output(QtWarningMsg,tr("The connection was refused by the peer. "
                                     "Make sure the Dropbox daemon is running, "
                                     "and check that the settings are correct.").toLatin1());
         break;
     case QLocalSocket::PeerClosedError:
         break;
     default:
         qt_message_output(QtWarningMsg,tr("The following error occurred: %1.")
                                  .arg(s->errorString()).toLatin1());
     }

 }



} /* End of namespace core */
