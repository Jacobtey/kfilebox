#include "DropboxClient.h"

namespace core {

 DropboxClient::DropboxClient(){
    daemon = new DaemonConnection();
    connect(daemon,SIGNAL(dataReceived(QString)),this,SLOT(processMessage(QString)));
    notif= new Notification();
}

bool DropboxClient::start()
// don't delete the following line as it's needed to preserve source code of this autogenerated element
// section 127-0-0-2-2bf78909:12883085e28:-8000:0000000000001272 begin
{

    bool returnValue=false;
    QString path(QDir::home().path());
    path.append(QDir::separator()).append(".dropbox-dist/dropboxd");
    path = QDir::toNativeSeparators(path);

    SystemCall *sc = new SystemCall();
    sc->executeDetached(path);

    float interval=0.5, wait_for=60000;

    int i=0;
    while (i<wait_for/interval && returnValue==false)
        if (is_running()){
            returnValue= true;
        }


    if (returnValue==true){
        sleep(1);
        daemon = new DaemonConnection();
        connect(daemon,SIGNAL(dataReceived(QString)),this,SLOT(processMessage(QString)));
        notif->notify(tr("Dropbox daemon started"));
    }
    else{
        qt_message_output(QtWarningMsg,tr("Unable to start Dropbox daemon").toLatin1());
        notif->notify(tr("Unable to start Dropbox daemon"));
    }

    return returnValue;
}
// section 127-0-0-2-2bf78909:12883085e28:-8000:0000000000001272 end
// don't delete the previous line as it's needed to preserve source code of this autogenerated element

bool DropboxClient::stop()
// don't delete the following line as it's needed to preserve source code of this autogenerated element
// section 127-0-0-2-2bf78909:12883085e28:-8000:000000000000127B begin
{
    //using namespace core;
    daemon->send_command("tray_action_hard_exit","");
    //daemon->~DaemonConnection();
    return false;
}
// section 127-0-0-2-2bf78909:12883085e28:-8000:000000000000127B end
// don't delete the previous line as it's needed to preserve source code of this autogenerated element

bool DropboxClient::is_running()
// don't delete the following line as it's needed to preserve source code of this autogenerated element
// section 127-0-0-2-2bf78909:12883085e28:-8000:000000000000127D begin
{
    QString path(QDir::home().path());
    path.append(QDir::separator()).append(".dropbox/dropbox.pid");
    path = QDir::toNativeSeparators(path);

    QFile file(path);
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
             return false;

    QTextStream in(&file);
    while (!in.atEnd()) {
         QString line = in.readLine();
         pid=line.toInt();
     }

    QString proc_path("/proc");
    proc_path.append(QDir::separator()).append(QString::number(pid)).append(QDir::separator()).append("cmdline");
    proc_path = QDir::toNativeSeparators(proc_path);

    QFile proc_file(proc_path);
    if (!proc_file.open(QIODevice::ReadOnly | QIODevice::Text))
             return false;
    else
            return true;

    return false;
}
// section 127-0-0-2-2bf78909:12883085e28:-8000:000000000000127D end
// don't delete the previous line as it's needed to preserve source code of this autogenerated element

QString DropboxClient::status()
// don't delete the following line as it's needed to preserve source code of this autogenerated element
// section 127-0-0-2-2bf78909:12883085e28:-8000:000000000000127F begin
{
    QString returnValue="";
    daemon->send_command("get_dropbox_status","");

    return returnValue;
}
// section 127-0-0-2-2bf78909:12883085e28:-8000:000000000000127F end
// don't delete the previous line as it's needed to preserve source code of this autogenerated element

void DropboxClient::processMessage(QString msg){
    //qt_message_output(QtWarningMsg,"++"+msg.toLatin1()+"++");

    bool emit_msg=true;
    QStringList list=msg.split("\n");
    if (list.length()>1 && list[0].trimmed()=="ok"){
        list=list[1].split("\t");
        if (list.length()==1 && list[0].trimmed()=="status")
            msg="Idle";
        else if (list.length()>1 && list[0].trimmed()=="status")
            msg=list[1];
        else {
            msg="?";
            emit_msg=false;
        }
        if (emit_msg)
            emit (messageProcessed(msg));
    }
}

void DropboxClient::setConfiguration(Configuration *c){
    this->conf=c;
    this->notif->setConfiguration(c);
}

} /* End of namespace core */
